Index: Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.awt.Color;\nimport java.util.ArrayList;\n\nimport game.GameLib;\nimport game.gameObjects.entities.Enemy;\n\n/***********************************************************************/\n/*                                                                     */\n/* Para jogar:                                                         */\n/*                                                                     */\n/*    - cima, baixo, esquerda, direita: movimentação do player.        */\n/*    - control: disparo de projéteis.                                 */\n/*    - ESC: para sair do jogo.                                        */\n/*                                                                     */\n/***********************************************************************/\n\npublic class Main {\n\t\n\t/* Constantes relacionadas aos estados que os elementos   */\n\t/* do jogo (player, projeteis ou inimigos) podem assumir. */\n\t\n\tpublic static final int INACTIVE = 0;\n\tpublic static final int ACTIVE = 1;\n\tpublic static final int EXPLODING = 2;\n\t\n\t/* Espera, sem fazer nada, até que o instante de tempo atual seja */\n\t/* maior ou igual ao instante especificado no parâmetro \"time.    */\n\t\n\tpublic static void busyWait(long time){\n\t\t\n\t\twhile(System.currentTimeMillis() < time) Thread.yield();\n\t}\n\t\n\t/* Encontra e devolve o primeiro índice do  */\n\t/* array referente a uma posição \"inativa\". */\n\t\n\tpublic static int findFreeIndex(int [] stateArray){\n\t\t\n\t\tint i;\n\t\t\n\t\tfor(i = 0; i < stateArray.length; i++){\n\t\t\t\n\t\t\tif(stateArray[i] == INACTIVE) break;\n\t\t}\n\t\t\n\t\treturn i;\n\t}\n\t\n\t/* Encontra e devolve o conjunto de índices (a quantidade */\n\t/* de índices é defnida através do parâmetro \"amount\") do */\n\t/* array referente a posições \"inativas\".                 */ \n\n\tpublic static int [] findFreeIndex(int [] stateArray, int amount){\n\n\t\tint i, k;\n\t\tint [] freeArray = new int[amount];\n\n\t\tfor(i = 0; i < freeArray.length; i++) freeArray[i] = stateArray.length; \n\t\t\n\t\tfor(i = 0, k = 0; i < stateArray.length && k < amount; i++){\n\t\t\t\t\n\t\t\tif(stateArray[i] == INACTIVE) { \n\t\t\t\t\n\t\t\t\tfreeArray[k] = i; \n\t\t\t\tk++;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn freeArray;\n\t}\n\t\n\t/* Método principal */\n\t\n\tpublic static void main(String [] args){\n\n\t\t/* Indica que o jogo está em execução */\n\n\t\tboolean running = true;\n\n\t\t/* variáveis usadas no controle de tempo efetuado no main loop */\n\t\t\n\t\tlong delta;\n\t\tlong currentTime = System.currentTimeMillis();\n\n\t\t/* variáveis do player */\n\t\t\n\t\tint player_state = ACTIVE;\t\t\t\t\t\t// estado\n\t\tdouble player_X = GameLib.WIDTH / 2;\t\t\t\t\t// coordenada x\n\t\tdouble player_Y = GameLib.HEIGHT * 0.90;\t\t\t\t// coordenada y\n\t\tdouble player_VX = 0.25;\t\t\t\t\t\t// velocidade no eixo x\n\t\tdouble player_VY = 0.25;\t\t\t\t\t\t// velocidade no eixo y\n\t\tdouble player_radius = 12.0;\t\t\t\t\t\t// raio (tamanho aproximado do player)\n\t\tdouble player_explosion_start = 0;\t\t\t\t\t// instante do início da explosão\n\t\tdouble player_explosion_end = 0;\t\t\t\t\t// instante do final da explosão\n\t\tlong player_nextShot = currentTime;\t\t\t\t\t// instante a partir do qual pode haver um próximo tiro\n\n\t\t/* variáveis dos projéteis disparados pelo player */\n\n\t\tint [] projectile_states = new int[10];\t\t\t\t\t// estados\n\t\tdouble [] projectile_X = new double[10];\t\t\t\t// coordenadas x\n\t\tdouble [] projectile_Y = new double[10];\t\t\t\t// coordenadas y\n\t\tdouble [] projectile_VX = new double[10];\t\t\t\t// velocidades no eixo x\n\t\tdouble [] projectile_VY = new double[10];\t\t\t\t// velocidades no eixo y\n\n\t\t/* variáveis dos inimigos tipo 1 */\n\t\tArrayList<Enemy> inimigo1 = new ArrayList<>();\n\t\tEnemy inimigo = new Enemy(0,0,9);\n\t\tinimigo1.add(inimigo);\n\t\tint [] enemy1_states = new int[10];\t\t\t\t\t// estados\n\t\tdouble [] enemy1_X = new double[10];\t\t\t\t\t// coordenadas x\n\t\tdouble [] enemy1_Y = new double[10];\t\t\t\t\t// coordenadas y\n\t\tdouble [] enemy1_V = new double[10];\t\t\t\t\t// velocidades\n\t\tdouble [] enemy1_angle = new double[10];\t\t\t\t// ângulos (indicam direção do movimento)\n\t\tdouble [] enemy1_RV = new double[10];\t\t\t\t\t// velocidades de rotação\n\t\tdouble [] enemy1_explosion_start = new double[10];\t\t\t// instantes dos inícios das explosões\n\t\tdouble [] enemy1_explosion_end = new double[10];\t\t\t// instantes dos finais da explosões\n\t\tlong [] enemy1_nextShoot = new long[10];\t\t\t\t// instantes do próximo tiro\n\t\tdouble enemy1_radius = 9.0;\t\t\t\t\t\t// raio (tamanho do inimigo 1)\n\t\tlong nextEnemy1 = currentTime + 2000;\t\t\t\t\t// instante em que um novo inimigo 1 deve aparecer\n\t\t\n\t\t/* variáveis dos inimigos tipo 2 */\n\t\t\n\t\tint [] enemy2_states = new int[10];\t\t\t\t\t// estados\n\t\tdouble [] enemy2_X = new double[10];\t\t\t\t\t// coordenadas x\n\t\tdouble [] enemy2_Y = new double[10];\t\t\t\t\t// coordenadas y\n\t\tdouble [] enemy2_V = new double[10];\t\t\t\t\t// velocidades\n\t\tdouble [] enemy2_angle = new double[10];\t\t\t\t// ângulos (indicam direção do movimento)\n\t\tdouble [] enemy2_RV = new double[10];\t\t\t\t\t// velocidades de rotação\n\t\tdouble [] enemy2_explosion_start = new double[10];\t\t\t// instantes dos inícios das explosões\n\t\tdouble [] enemy2_explosion_end = new double[10];\t\t\t// instantes dos finais das explosões\n\t\tdouble enemy2_spawnX = GameLib.WIDTH * 0.20;\t\t\t\t// coordenada x do próximo inimigo tipo 2 a aparecer\n\t\tint enemy2_count = 0;\t\t\t\t\t\t\t// contagem de inimigos tipo 2 (usada na \"formação de voo\")\n\t\tdouble enemy2_radius = 12.0;\t\t\t\t\t\t// raio (tamanho aproximado do inimigo 2)\n\t\tlong nextEnemy2 = currentTime + 7000;\t\t\t\t\t// instante em que um novo inimigo 2 deve aparecer\n\t\t\n\t\t/* variáveis dos projéteis lançados pelos inimigos (tanto tipo 1, quanto tipo 2) */\n\t\t\n\t\tint [] e_projectile_states = new int[200];\t\t\t\t// estados\n\t\tdouble [] e_projectile_X = new double[200];\t\t\t\t// coordenadas x\n\t\tdouble [] e_projectile_Y = new double[200];\t\t\t\t// coordenadas y\n\t\tdouble [] e_projectile_VX = new double[200];\t\t\t\t// velocidade no eixo x\n\t\tdouble [] e_projectile_VY = new double[200];\t\t\t\t// velocidade no eixo y\n\t\tdouble e_projectile_radius = 2.0;\t\t\t\t\t// raio (tamanho dos projéteis inimigos)\n\t\t\n\t\t/* estrelas que formam o fundo de primeiro plano */\n\t\t\n\t\tdouble [] background1_X = new double[20];\n\t\tdouble [] background1_Y = new double[20];\n\t\tdouble background1_speed = 0.070;\n\t\tdouble background1_count = 0.0;\n\t\t\n\t\t/* estrelas que formam o fundo de segundo plano */\n\t\t\n\t\tdouble [] background2_X = new double[50];\n\t\tdouble [] background2_Y = new double[50];\n\t\tdouble background2_speed = 0.045;\n\t\tdouble background2_count = 0.0;\n\t\t\n\t\t/* inicializações */\n\t\t\n\t\tfor(int i = 0; i < projectile_states.length; i++) projectile_states[i] = INACTIVE;\n\t\tfor(int i = 0; i < e_projectile_states.length; i++) e_projectile_states[i] = INACTIVE;\n\t\tfor(int i = 0; i < enemy1_states.length; i++) enemy1_states[i] = INACTIVE;\n\t\tfor(int i = 0; i < enemy2_states.length; i++) enemy2_states[i] = INACTIVE;\n\t\t\n\t\tfor(int i = 0; i < background1_X.length; i++){\n\t\t\t\n\t\t\tbackground1_X[i] = Math.random() * GameLib.WIDTH;\n\t\t\tbackground1_Y[i] = Math.random() * GameLib.HEIGHT;\n\t\t}\n\t\t\n\t\tfor(int i = 0; i < background2_X.length; i++){\n\t\t\t\n\t\t\tbackground2_X[i] = Math.random() * GameLib.WIDTH;\n\t\t\tbackground2_Y[i] = Math.random() * GameLib.HEIGHT;\n\t\t}\n\t\t\t\t\t\t\n\t\t/* iniciado interface gráfica */\n\t\t\n\t\tGameLib.initGraphics();\n\t\t//GameLib.initGraphics_SAFE_MODE();  // chame esta versão do método caso nada seja desenhado na janela do jogo.\n\t\t\n\t\t/*************************************************************************************************/\n\t\t/*                                                                                               */\n\t\t/* Main loop do jogo                                                                             */\n\t\t/* -----------------                                                                             */\n\t\t/*                                                                                               */\n\t\t/* O main loop do jogo executa as seguintes operações:                                           */\n\t\t/*                                                                                               */\n\t\t/* 1) Verifica se há colisões e atualiza estados dos elementos conforme a necessidade.           */\n\t\t/*                                                                                               */\n\t\t/* 2) Atualiza estados dos elementos baseados no tempo que correu entre a última atualização     */\n\t\t/*    e o timestamp atual: posição e orientação, execução de disparos de projéteis, etc.         */\n\t\t/*                                                                                               */\n\t\t/* 3) Processa entrada do usuário (teclado) e atualiza estados do player conforme a necessidade. */\n\t\t/*                                                                                               */\n\t\t/* 4) Desenha a cena, a partir dos estados dos elementos.                                        */\n\t\t/*                                                                                               */\n\t\t/* 5) Espera um período de tempo (de modo que delta seja aproximadamente sempre constante).      */\n\t\t/*                                                                                               */\n\t\t/*************************************************************************************************/\n\t\t\n\t\twhile(running){\n\t\t\n\t\t\t/* Usada para atualizar o estado dos elementos do jogo    */\n\t\t\t/* (player, projéteis e inimigos) \"delta\" indica quantos  */\n\t\t\t/* ms se passaram desde a última atualização.             */\n\t\t\t\n\t\t\tdelta = System.currentTimeMillis() - currentTime;\n\t\t\t\n\t\t\t/* Já a variável \"currentTime\" nos dá o timestamp atual.  */\n\t\t\t\n\t\t\tcurrentTime = System.currentTimeMillis();\n\t\t\t\n\t\t\t/***************************/\n\t\t\t/* Verificação de colisões */\n\t\t\t/***************************/\n\n\t\t\tif(player_state == ACTIVE){\n\t\t\t\t\n\t\t\t\t/* colisões player - projeteis (inimigo) */\n\t\t\t\t\n\t\t\t\tfor(int i = 0; i < e_projectile_states.length; i++){\n\t\t\t\t\t\n\t\t\t\t\tdouble dx = e_projectile_X[i] - player_X;\n\t\t\t\t\tdouble dy = e_projectile_Y[i] - player_Y;\n\t\t\t\t\tdouble dist = Math.sqrt(dx * dx + dy * dy);\n\t\t\t\t\t\n\t\t\t\t\tif(dist < (player_radius + e_projectile_radius) * 0.8){\n\t\t\t\t\t\t\n\t\t\t\t\t\tplayer_state = EXPLODING;\n\t\t\t\t\t\tplayer_explosion_start = currentTime;\n\t\t\t\t\t\tplayer_explosion_end = currentTime + 2000;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\n\t\t\t\t/* colisões player - inimigos */\n\t\t\t\t\t\t\t\n\t\t\t\tfor(int i = 0; i < enemy1_states.length; i++){\n\t\t\t\t\t\n\t\t\t\t\tdouble dx = enemy1_X[i] - player_X;\n\t\t\t\t\tdouble dy = enemy1_Y[i] - player_Y;\n\t\t\t\t\tdouble dist = Math.sqrt(dx * dx + dy * dy);\n\t\t\t\t\t\n\t\t\t\t\tif(dist < (player_radius + enemy1_radius) * 0.8){\n\t\t\t\t\t\t\n\t\t\t\t\t\tplayer_state = EXPLODING;\n\t\t\t\t\t\tplayer_explosion_start = currentTime;\n\t\t\t\t\t\tplayer_explosion_end = currentTime + 2000;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfor(int i = 0; i < enemy2_states.length; i++){\n\t\t\t\t\t\n\t\t\t\t\tdouble dx = enemy2_X[i] - player_X;\n\t\t\t\t\tdouble dy = enemy2_Y[i] - player_Y;\n\t\t\t\t\tdouble dist = Math.sqrt(dx * dx + dy * dy);\n\t\t\t\t\t\n\t\t\t\t\tif(dist < (player_radius + enemy2_radius) * 0.8){\n\t\t\t\t\t\t\n\t\t\t\t\t\tplayer_state = EXPLODING;\n\t\t\t\t\t\tplayer_explosion_start = currentTime;\n\t\t\t\t\t\tplayer_explosion_end = currentTime + 2000;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t/* colisões projeteis (player) - inimigos */\n\t\t\t\n\t\t\tfor(int k = 0; k < projectile_states.length; k++){\n\t\t\t\t\n\t\t\t\tfor(int i = 0; i < enemy1_states.length; i++){\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\tif(enemy1_states[i] == ACTIVE){\n\t\t\t\t\t\n\t\t\t\t\t\tdouble dx = enemy1_X[i] - projectile_X[k];\n\t\t\t\t\t\tdouble dy = enemy1_Y[i] - projectile_Y[k];\n\t\t\t\t\t\tdouble dist = Math.sqrt(dx * dx + dy * dy);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(dist < enemy1_radius){\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tenemy1_states[i] = EXPLODING;\n\t\t\t\t\t\t\tenemy1_explosion_start[i] = currentTime;\n\t\t\t\t\t\t\tenemy1_explosion_end[i] = currentTime + 500;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfor(int i = 0; i < enemy2_states.length; i++){\n\t\t\t\t\t\n\t\t\t\t\tif(enemy2_states[i] == ACTIVE){\n\t\t\t\t\t\t\n\t\t\t\t\t\tdouble dx = enemy2_X[i] - projectile_X[k];\n\t\t\t\t\t\tdouble dy = enemy2_Y[i] - projectile_Y[k];\n\t\t\t\t\t\tdouble dist = Math.sqrt(dx * dx + dy * dy);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(dist < enemy2_radius){\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tenemy2_states[i] = EXPLODING;\n\t\t\t\t\t\t\tenemy2_explosion_start[i] = currentTime;\n\t\t\t\t\t\t\tenemy2_explosion_end[i] = currentTime + 500;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\t\n\t\t\t/***************************/\n\t\t\t/* Atualizações de estados */\n\t\t\t/***************************/\n\t\t\t\n\t\t\t/* projeteis (player) */\n\t\t\t\n\t\t\tfor(int i = 0; i < projectile_states.length; i++){\n\t\t\t\t\n\t\t\t\tif(projectile_states[i] == ACTIVE){\n\t\t\t\t\t\n\t\t\t\t\t/* verificando se projétil saiu da tela */\n\t\t\t\t\tif(projectile_Y[i] < 0) {\n\t\t\t\t\t\t\n\t\t\t\t\t\tprojectile_states[i] = INACTIVE;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\n\t\t\t\t\t\tprojectile_X[i] += projectile_VX[i] * delta;\n\t\t\t\t\t\tprojectile_Y[i] += projectile_VY[i] * delta;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t/* projeteis (inimigos) */\n\t\t\t\n\t\t\tfor(int i = 0; i < e_projectile_states.length; i++){\n\t\t\t\t\n\t\t\t\tif(e_projectile_states[i] == ACTIVE){\n\t\t\t\t\t\n\t\t\t\t\t/* verificando se projétil saiu da tela */\n\t\t\t\t\tif(e_projectile_Y[i] > GameLib.HEIGHT) {\n\t\t\t\t\t\t\n\t\t\t\t\t\te_projectile_states[i] = INACTIVE;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\n\t\t\t\t\t\te_projectile_X[i] += e_projectile_VX[i] * delta;\n\t\t\t\t\t\te_projectile_Y[i] += e_projectile_VY[i] * delta;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t/* inimigos tipo 1 */\n\t\t\t\n\t\t\tfor(int i = 0; i < enemy1_states.length; i++){\n\t\t\t\t\n\t\t\t\tif(enemy1_states[i] == EXPLODING){\n\t\t\t\t\t\n\t\t\t\t\tif(currentTime > enemy1_explosion_end[i]){\n\t\t\t\t\t\t\n\t\t\t\t\t\tenemy1_states[i] = INACTIVE;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(enemy1_states[i] == ACTIVE){\n\t\t\t\t\t\n\t\t\t\t\t/* verificando se inimigo saiu da tela */\n\t\t\t\t\tif(enemy1_Y[i] > GameLib.HEIGHT + 10) {\n\t\t\t\t\t\t\n\t\t\t\t\t\tenemy1_states[i] = INACTIVE;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\n\t\t\t\t\t\tenemy1_X[i] += enemy1_V[i] * Math.cos(enemy1_angle[i]) * delta;\n\t\t\t\t\t\tenemy1_Y[i] += enemy1_V[i] * Math.sin(enemy1_angle[i]) * delta * (-1.0);\n\t\t\t\t\t\tenemy1_angle[i] += enemy1_RV[i] * delta;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(currentTime > enemy1_nextShoot[i] && enemy1_Y[i] < player_Y){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tint free = findFreeIndex(e_projectile_states);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif(free < e_projectile_states.length){\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\te_projectile_X[free] = enemy1_X[i];\n\t\t\t\t\t\t\t\te_projectile_Y[free] = enemy1_Y[i];\n\t\t\t\t\t\t\t\te_projectile_VX[free] = Math.cos(enemy1_angle[i]) * 0.45;\n\t\t\t\t\t\t\t\te_projectile_VY[free] = Math.sin(enemy1_angle[i]) * 0.45 * (-1.0);\n\t\t\t\t\t\t\t\te_projectile_states[free] = ACTIVE;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tenemy1_nextShoot[i] = (long) (currentTime + 200 + Math.random() * 500);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t/* inimigos tipo 2 */\n\t\t\tfor(int i = 0; i < enemy2_states.length; i++){\n\t\t\t\t\n\t\t\t\tif(enemy2_states[i] == EXPLODING){\n\t\t\t\t\t\n\t\t\t\t\tif(currentTime > enemy2_explosion_end[i]){\n\t\t\t\t\t\t\n\t\t\t\t\t\tenemy2_states[i] = INACTIVE;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(enemy2_states[i] == ACTIVE){\n\t\t\t\t\t\n\t\t\t\t\t/* verificando se inimigo saiu da tela */\n\t\t\t\t\tif(\tenemy2_X[i] < -10 || enemy2_X[i] > GameLib.WIDTH + 10 ) {\n\t\t\t\t\t\t\n\t\t\t\t\t\tenemy2_states[i] = INACTIVE;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t\n\t\t\t\t\t\tboolean shootNow = false;\n\t\t\t\t\t\tdouble previousY = enemy2_Y[i];\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tenemy2_X[i] += enemy2_V[i] * Math.cos(enemy2_angle[i]) * delta;\n\t\t\t\t\t\tenemy2_Y[i] += enemy2_V[i] * Math.sin(enemy2_angle[i]) * delta * (-1.0);\n\t\t\t\t\t\tenemy2_angle[i] += enemy2_RV[i] * delta;\n\t\t\t\t\t\t\n\t\t\t\t\t\tdouble threshold = GameLib.HEIGHT * 0.30;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(previousY < threshold && enemy2_Y[i] >= threshold) {\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif(enemy2_X[i] < GameLib.WIDTH / 2) enemy2_RV[i] = 0.003;\n\t\t\t\t\t\t\telse enemy2_RV[i] = -0.003;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(enemy2_RV[i] > 0 && Math.abs(enemy2_angle[i] - 3 * Math.PI) < 0.05){\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tenemy2_RV[i] = 0.0;\n\t\t\t\t\t\t\tenemy2_angle[i] = 3 * Math.PI;\n\t\t\t\t\t\t\tshootNow = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(enemy2_RV[i] < 0 && Math.abs(enemy2_angle[i]) < 0.05){\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tenemy2_RV[i] = 0.0;\n\t\t\t\t\t\t\tenemy2_angle[i] = 0.0;\n\t\t\t\t\t\t\tshootNow = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tif(shootNow){\n\n\t\t\t\t\t\t\tdouble [] angles = { Math.PI/2 + Math.PI/8, Math.PI/2, Math.PI/2 - Math.PI/8 };\n\t\t\t\t\t\t\tint [] freeArray = findFreeIndex(e_projectile_states, angles.length);\n\n\t\t\t\t\t\t\tfor(int k = 0; k < freeArray.length; k++){\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tint free = freeArray[k];\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif(free < e_projectile_states.length){\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tdouble a = angles[k] + Math.random() * Math.PI/6 - Math.PI/12;\n\t\t\t\t\t\t\t\t\tdouble vx = Math.cos(a);\n\t\t\t\t\t\t\t\t\tdouble vy = Math.sin(a);\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\te_projectile_X[free] = enemy2_X[i];\n\t\t\t\t\t\t\t\t\te_projectile_Y[free] = enemy2_Y[i];\n\t\t\t\t\t\t\t\t\te_projectile_VX[free] = vx * 0.30;\n\t\t\t\t\t\t\t\t\te_projectile_VY[free] = vy * 0.30;\n\t\t\t\t\t\t\t\t\te_projectile_states[free] = ACTIVE;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t/* verificando se novos inimigos (tipo 1) devem ser \"lançados\" */\n\t\t\t\n\t\t\tif(currentTime > nextEnemy1){\n\t\t\t\t\n\t\t\t\tint free = findFreeIndex(enemy1_states);\n\t\t\t\t\t\t\t\t\n\t\t\t\tif(free < enemy1_states.length){\n\t\t\t\t\t\n\t\t\t\t\tenemy1_X[free] = Math.random() * (GameLib.WIDTH - 20.0) + 10.0;\n\t\t\t\t\tenemy1_Y[free] = -10.0;\n\t\t\t\t\tenemy1_V[free] = 0.20 + Math.random() * 0.15;\n\t\t\t\t\tenemy1_angle[free] = (3 * Math.PI) / 2;\n\t\t\t\t\tenemy1_RV[free] = 0.0;\n\t\t\t\t\tenemy1_states[free] = ACTIVE;\n\t\t\t\t\tenemy1_nextShoot[free] = currentTime + 500;\n\t\t\t\t\tnextEnemy1 = currentTime + 500;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t/* verificando se novos inimigos (tipo 2) devem ser \"lançados\" */\n\t\t\t\n\t\t\tif(currentTime > nextEnemy2){\n\t\t\t\t\n\t\t\t\tint free = findFreeIndex(enemy2_states);\n\t\t\t\t\t\t\t\t\n\t\t\t\tif(free < enemy2_states.length){\n\t\t\t\t\t\n\t\t\t\t\tenemy2_X[free] = enemy2_spawnX;\n\t\t\t\t\tenemy2_Y[free] = -10.0;\n\t\t\t\t\tenemy2_V[free] = 0.42;\n\t\t\t\t\tenemy2_angle[free] = (3 * Math.PI) / 2;\n\t\t\t\t\tenemy2_RV[free] = 0.0;\n\t\t\t\t\tenemy2_states[free] = ACTIVE;\n\n\t\t\t\t\tenemy2_count++;\n\t\t\t\t\t\n\t\t\t\t\tif(enemy2_count < 10){\n\t\t\t\t\t\t\n\t\t\t\t\t\tnextEnemy2 = currentTime + 120;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t\n\t\t\t\t\t\tenemy2_count = 0;\n\t\t\t\t\t\tenemy2_spawnX = Math.random() > 0.5 ? GameLib.WIDTH * 0.2 : GameLib.WIDTH * 0.8;\n\t\t\t\t\t\tnextEnemy2 = (long) (currentTime + 3000 + Math.random() * 3000);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t/* Verificando se a explosão do player já acabou.         */\n\t\t\t/* Ao final da explosão, o player volta a ser controlável */\n\t\t\tif(player_state == EXPLODING){\n\t\t\t\t\n\t\t\t\tif(currentTime > player_explosion_end){\n\t\t\t\t\t\n\t\t\t\t\tplayer_state = ACTIVE;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t/********************************************/\n\t\t\t/* Verificando entrada do usuário (teclado) */\n\t\t\t/********************************************/\n\t\t\t\n\t\t\tif(player_state == ACTIVE){\n\t\t\t\t\n\t\t\t\tif(GameLib.iskeyPressed(GameLib.KEY_UP)) player_Y -= delta * player_VY;\n\t\t\t\tif(GameLib.iskeyPressed(GameLib.KEY_DOWN)) player_Y += delta * player_VY;\n\t\t\t\tif(GameLib.iskeyPressed(GameLib.KEY_LEFT)) player_X -= delta * player_VX;\n\t\t\t\tif(GameLib.iskeyPressed(GameLib.KEY_RIGHT)) player_X += delta * player_VY;\n\t\t\t\t\n\t\t\t\tif(GameLib.iskeyPressed(GameLib.KEY_CONTROL)) {\n\t\t\t\t\t\n\t\t\t\t\tif(currentTime > player_nextShot){\n\t\t\t\t\t\t\n\t\t\t\t\t\tint free = findFreeIndex(projectile_states);\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tif(free < projectile_states.length){\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tprojectile_X[free] = player_X;\n\t\t\t\t\t\t\tprojectile_Y[free] = player_Y - 2 * player_radius;\n\t\t\t\t\t\t\tprojectile_VX[free] = 0.0;\n\t\t\t\t\t\t\tprojectile_VY[free] = -1.0;\n\t\t\t\t\t\t\tprojectile_states[free] = ACTIVE;\n\t\t\t\t\t\t\tplayer_nextShot = currentTime + 100;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\t\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif(GameLib.iskeyPressed(GameLib.KEY_ESCAPE)) running = false;\n\t\t\t\n\t\t\t/* Verificando se coordenadas do player ainda estão dentro */\n\t\t\t/* da tela de jogo após processar entrada do usuário.      */\n\t\t\t\n\t\t\tif(player_X < 0.0) player_X = 0.0;\n\t\t\tif(player_X >= GameLib.WIDTH) player_X = GameLib.WIDTH - 1;\n\t\t\tif(player_Y < 25.0) player_Y = 25.0;\n\t\t\tif(player_Y >= GameLib.HEIGHT) player_Y = GameLib.HEIGHT - 1;\n\n\t\t\t/*******************/\n\t\t\t/* Desenho da cena */\n\t\t\t/*******************/\n\t\t\t\n\t\t\t/* desenhando plano fundo distante */\n\t\t\t\n\t\t\tGameLib.setColor(Color.DARK_GRAY);\n\t\t\tbackground2_count += background2_speed * delta;\n\t\t\t\n\t\t\tfor(int i = 0; i < background2_X.length; i++){\n\t\t\t\t\n\t\t\t\tGameLib.fillRect(background2_X[i], (background2_Y[i] + background2_count) % GameLib.HEIGHT, 2, 2);\n\t\t\t}\n\t\t\t\n\t\t\t/* desenhando plano de fundo próximo */\n\t\t\t\n\t\t\tGameLib.setColor(Color.GRAY);\n\t\t\tbackground1_count += background1_speed * delta;\n\t\t\t\n\t\t\tfor(int i = 0; i < background1_X.length; i++){\n\t\t\t\t\n\t\t\t\tGameLib.fillRect(background1_X[i], (background1_Y[i] + background1_count) % GameLib.HEIGHT, 3, 3);\n\t\t\t}\n\t\t\t\t\t\t\n\t\t\t/* desenhando player */\n\t\t\t\n\t\t\tif(player_state == EXPLODING){\n\t\t\t\t\n\t\t\t\tdouble alpha = (currentTime - player_explosion_start) / (player_explosion_end - player_explosion_start);\n\t\t\t\tGameLib.drawExplosion(player_X, player_Y, alpha);\n\t\t\t}\n\t\t\telse{\n\t\t\t\t\n\t\t\t\tGameLib.setColor(Color.BLUE);\n\t\t\t\tGameLib.drawPlayer(player_X, player_Y, player_radius);\n\t\t\t}\n\t\t\t\t\n\t\t\t/* deenhando projeteis (player) */\n\t\t\t\n\t\t\tfor(int i = 0; i < projectile_states.length; i++){\n\t\t\t\t\n\t\t\t\tif(projectile_states[i] == ACTIVE){\n\t\t\t\t\t\n\t\t\t\t\tGameLib.setColor(Color.GREEN);\n\t\t\t\t\tGameLib.drawLine(projectile_X[i], projectile_Y[i] - 5, projectile_X[i], projectile_Y[i] + 5);\n\t\t\t\t\tGameLib.drawLine(projectile_X[i] - 1, projectile_Y[i] - 3, projectile_X[i] - 1, projectile_Y[i] + 3);\n\t\t\t\t\tGameLib.drawLine(projectile_X[i] + 1, projectile_Y[i] - 3, projectile_X[i] + 1, projectile_Y[i] + 3);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t/* desenhando projeteis (inimigos) */\n\t\t\n\t\t\tfor(int i = 0; i < e_projectile_states.length; i++){\n\t\t\t\t\n\t\t\t\tif(e_projectile_states[i] == ACTIVE){\n\t\n\t\t\t\t\tGameLib.setColor(Color.RED);\n\t\t\t\t\tGameLib.drawCircle(e_projectile_X[i], e_projectile_Y[i], e_projectile_radius);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t/* desenhando inimigos (tipo 1) */\n\t\t\t\n\t\t\tfor(int i = 0; i < enemy1_states.length; i++){\n\t\t\t\t\n\t\t\t\tif(enemy1_states[i] == EXPLODING){\n\t\t\t\t\t\n\t\t\t\t\tdouble alpha = (currentTime - enemy1_explosion_start[i]) / (enemy1_explosion_end[i] - enemy1_explosion_start[i]);\n\t\t\t\t\tGameLib.drawExplosion(enemy1_X[i], enemy1_Y[i], alpha);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(enemy1_states[i] == ACTIVE){\n\t\t\t\n\t\t\t\t\tGameLib.setColor(Color.CYAN);\n\t\t\t\t\tGameLib.drawCircle(enemy1_X[i], enemy1_Y[i], enemy1_radius);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t/* desenhando inimigos (tipo 2) */\n\t\t\t\n\t\t\tfor(int i = 0; i < enemy2_states.length; i++){\n\t\t\t\t\n\t\t\t\tif(enemy2_states[i] == EXPLODING){\n\t\t\t\t\t\n\t\t\t\t\tdouble alpha = (currentTime - enemy2_explosion_start[i]) / (enemy2_explosion_end[i] - enemy2_explosion_start[i]);\n\t\t\t\t\tGameLib.drawExplosion(enemy2_X[i], enemy2_Y[i], alpha);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(enemy2_states[i] == ACTIVE){\n\t\t\t\n\t\t\t\t\tGameLib.setColor(Color.MAGENTA);\n\t\t\t\t\tGameLib.drawDiamond(enemy2_X[i], enemy2_Y[i], enemy2_radius);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t/* chamada a display() da classe GameLib atualiza o desenho exibido pela interface do jogo. */\n\t\t\t\n\t\t\tGameLib.display();\n\t\t\t\n\t\t\t/* faz uma pausa de modo que cada execução do laço do main loop demore aproximadamente 3 ms. */\n\t\t\t\n\t\t\tbusyWait(currentTime + 3);\n\t\t}\n\t\t\n\t\tSystem.exit(0);\n\t}\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Main.java b/Main.java
--- a/Main.java	(revision 575bbe84b7ffabf11e4f188fa1d2b7fcbc0e2291)
+++ b/Main.java	(date 1750858076074)
@@ -1,8 +1,6 @@
 import java.awt.Color;
-import java.util.ArrayList;
 
 import game.GameLib;
-import game.gameObjects.entities.Enemy;
 
 /***********************************************************************/
 /*                                                                     */
@@ -95,7 +93,7 @@
 		long player_nextShot = currentTime;					// instante a partir do qual pode haver um próximo tiro
 
 		/* variáveis dos projéteis disparados pelo player */
-
+		
 		int [] projectile_states = new int[10];					// estados
 		double [] projectile_X = new double[10];				// coordenadas x
 		double [] projectile_Y = new double[10];				// coordenadas y
@@ -103,9 +101,7 @@
 		double [] projectile_VY = new double[10];				// velocidades no eixo y
 
 		/* variáveis dos inimigos tipo 1 */
-		ArrayList<Enemy> inimigo1 = new ArrayList<>();
-		Enemy inimigo = new Enemy(0,0,9);
-		inimigo1.add(inimigo);
+		
 		int [] enemy1_states = new int[10];					// estados
 		double [] enemy1_X = new double[10];					// coordenadas x
 		double [] enemy1_Y = new double[10];					// coordenadas y
@@ -215,7 +211,7 @@
 			/***************************/
 			/* Verificação de colisões */
 			/***************************/
-
+						
 			if(player_state == ACTIVE){
 				
 				/* colisões player - projeteis (inimigo) */
@@ -389,7 +385,9 @@
 					}
 				}
 			}
+			
 			/* inimigos tipo 2 */
+			
 			for(int i = 0; i < enemy2_states.length; i++){
 				
 				if(enemy2_states[i] == EXPLODING){
Index: game/GameElement.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package game;\n\nimport java.awt.Color;\n\npublic abstract class GameElement {\n    public static final int INACTIVE = 0;\n\tpublic static final int ACTIVE = 1;\n\tpublic static final int EXPLODING = 2;\n\n\tprotected int state = ACTIVE;\t\t\t\t    // estado\n\tprotected double X = 0;\t\t\t\t\t\t\t// coordenada x\n\tprotected double Y = 0;\t\t\t\t\t\t\t// coordenada y\n\tprotected double VX = 0.25;\t\t\t\t\t\t// velocidade no eixo x\n\tprotected double VY = 0.25;\t\t\t\t\t\t// velocidade no eixo y\n\tprotected double radius = 12.0;\t\t\t\t\t// raio (tamanho aproximado)\n\n    protected double angle;     \t\t\t\t    // ângulos (indicam direção do movimento)\n\tprotected double RV;                            // velocidades de rotação\n\n    protected long now = System.currentTimeMillis();\n    protected Color color;\n\n    public GameElement(double x, double y, double radius){\n        X = x;\n        Y = y;\n        this.radius = radius;\n    }\n\n\tpublic boolean collidesWith(GameElement collider) {\n        double dx = this.X - collider.X;\n        double dy = this.Y - collider.Y;\n        double dist = Math.sqrt(dx * dx + dy * dy);\n        return dist < this.radius + collider.radius;\n    }\n\n\tpublic int getState() {\n        return state;\n    }\n\n    public void setState(int state) {\n        this.state = state;\n    }\n\n    //necessario para Enemy\n    public double getY(){\n        return Y;\n    }\n\n    //necessario para Projectile\n    public double getX(){\n        return X;\n    }\n\n    //necessario para Projectile\n    public double getAngle(){\n        return angle;\n    }\n\n    //necasario para Projectile\n    public  double getRadius(){\n        return radius;\n    }\n    \n    public void setColor(Color color){\n        this.color = color;\n    }\n\n    public abstract void update(long delta);\n    public abstract void draw();\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/game/GameElement.java b/game/GameElement.java
--- a/game/GameElement.java	(revision 575bbe84b7ffabf11e4f188fa1d2b7fcbc0e2291)
+++ b/game/GameElement.java	(date 1750858076074)
@@ -40,26 +40,6 @@
     public void setState(int state) {
         this.state = state;
     }
-
-    //necessario para Enemy
-    public double getY(){
-        return Y;
-    }
-
-    //necessario para Projectile
-    public double getX(){
-        return X;
-    }
-
-    //necessario para Projectile
-    public double getAngle(){
-        return angle;
-    }
-
-    //necasario para Projectile
-    public  double getRadius(){
-        return radius;
-    }
     
     public void setColor(Color color){
         this.color = color;
Index: out/production/EP-COO/.idea/modules.xml
===================================================================
diff --git a/out/production/EP-COO/.idea/modules.xml b/out/production/EP-COO/.idea/modules.xml
deleted file mode 100644
--- a/out/production/EP-COO/.idea/modules.xml	(revision 575bbe84b7ffabf11e4f188fa1d2b7fcbc0e2291)
+++ /dev/null	(revision 575bbe84b7ffabf11e4f188fa1d2b7fcbc0e2291)
@@ -1,8 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="ProjectModuleManager">
-    <modules>
-      <module fileurl="file://$PROJECT_DIR$/EP-COO.iml" filepath="$PROJECT_DIR$/EP-COO.iml" />
-    </modules>
-  </component>
-</project>
\ No newline at end of file
Index: .idea/modules.xml
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
deleted file mode 100644
--- a/.idea/modules.xml	(revision 575bbe84b7ffabf11e4f188fa1d2b7fcbc0e2291)
+++ /dev/null	(revision 575bbe84b7ffabf11e4f188fa1d2b7fcbc0e2291)
@@ -1,8 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="ProjectModuleManager">
-    <modules>
-      <module fileurl="file://$PROJECT_DIR$/EP-COO.iml" filepath="$PROJECT_DIR$/EP-COO.iml" />
-    </modules>
-  </component>
-</project>
\ No newline at end of file
Index: EP-COO.iml
===================================================================
diff --git a/EP-COO.iml b/EP-COO.iml
deleted file mode 100644
--- a/EP-COO.iml	(revision 575bbe84b7ffabf11e4f188fa1d2b7fcbc0e2291)
+++ /dev/null	(revision 575bbe84b7ffabf11e4f188fa1d2b7fcbc0e2291)
@@ -1,11 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$" isTestSource="false" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-  </component>
-</module>
\ No newline at end of file
Index: out/production/EP-COO/.idea/misc.xml
===================================================================
diff --git a/out/production/EP-COO/.idea/misc.xml b/out/production/EP-COO/.idea/misc.xml
deleted file mode 100644
--- a/out/production/EP-COO/.idea/misc.xml	(revision 575bbe84b7ffabf11e4f188fa1d2b7fcbc0e2291)
+++ /dev/null	(revision 575bbe84b7ffabf11e4f188fa1d2b7fcbc0e2291)
@@ -1,6 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_21" default="true" project-jdk-name="21" project-jdk-type="JavaSDK">
-    <output url="file://$PROJECT_DIR$/out" />
-  </component>
-</project>
\ No newline at end of file
Index: out/production/EP-COO/.idea/.gitignore
===================================================================
diff --git a/out/production/EP-COO/.idea/.gitignore b/out/production/EP-COO/.idea/.gitignore
deleted file mode 100644
--- a/out/production/EP-COO/.idea/.gitignore	(revision 575bbe84b7ffabf11e4f188fa1d2b7fcbc0e2291)
+++ /dev/null	(revision 575bbe84b7ffabf11e4f188fa1d2b7fcbc0e2291)
@@ -1,5 +0,0 @@
-# Default ignored files
-/shelf/
-/workspace.xml
-# Environment-dependent path to Maven home directory
-/mavenHomeManager.xml
Index: out/production/EP-COO/EP-COO.iml
===================================================================
diff --git a/out/production/EP-COO/EP-COO.iml b/out/production/EP-COO/EP-COO.iml
deleted file mode 100644
--- a/out/production/EP-COO/EP-COO.iml	(revision 575bbe84b7ffabf11e4f188fa1d2b7fcbc0e2291)
+++ /dev/null	(revision 575bbe84b7ffabf11e4f188fa1d2b7fcbc0e2291)
@@ -1,11 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$" isTestSource="false" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-  </component>
-</module>
\ No newline at end of file
Index: .idea/.gitignore
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
deleted file mode 100644
--- a/.idea/.gitignore	(revision 575bbe84b7ffabf11e4f188fa1d2b7fcbc0e2291)
+++ /dev/null	(revision 575bbe84b7ffabf11e4f188fa1d2b7fcbc0e2291)
@@ -1,5 +0,0 @@
-# Default ignored files
-/shelf/
-/workspace.xml
-# Environment-dependent path to Maven home directory
-/mavenHomeManager.xml
Index: out/production/EP-COO/.idea/vcs.xml
===================================================================
diff --git a/out/production/EP-COO/.idea/vcs.xml b/out/production/EP-COO/.idea/vcs.xml
deleted file mode 100644
--- a/out/production/EP-COO/.idea/vcs.xml	(revision 575bbe84b7ffabf11e4f188fa1d2b7fcbc0e2291)
+++ /dev/null	(revision 575bbe84b7ffabf11e4f188fa1d2b7fcbc0e2291)
@@ -1,6 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="VcsDirectoryMappings">
-    <mapping directory="" vcs="Git" />
-  </component>
-</project>
\ No newline at end of file
Index: out/production/EP-COO/README.md
===================================================================
diff --git a/out/production/EP-COO/README.md b/out/production/EP-COO/README.md
deleted file mode 100644
--- a/out/production/EP-COO/README.md	(revision 575bbe84b7ffabf11e4f188fa1d2b7fcbc0e2291)
+++ /dev/null	(revision 575bbe84b7ffabf11e4f188fa1d2b7fcbc0e2291)
@@ -1,1 +0,0 @@
-# epcoutinho
